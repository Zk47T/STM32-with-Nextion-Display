
Verion2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000206c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f8  080021f8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080021f8  080021f8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021f8  080021f8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000060  08002260  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08002260  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000064b3  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001315  00000000  00000000  0002657f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00027898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004a0  00000000  00000000  00027eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ac6  00000000  00000000  00028350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000079eb  00000000  00000000  0003ee16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081d84  00000000  00000000  00046801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c94  00000000  00000000  000c8588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ca21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002160 	.word	0x08002160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002160 	.word	0x08002160

0800014c <NEXTION_SendString>:
/* USER CODE BEGIN 0 */

uint8_t Cmd_End[3] = {0xFF,0xFF,0xFF};  // command end sequence

void NEXTION_SendString (char *ID, char *string)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 8000156:	f107 0008 	add.w	r0, r7, #8
 800015a:	683b      	ldr	r3, [r7, #0]
 800015c:	687a      	ldr	r2, [r7, #4]
 800015e:	490d      	ldr	r1, [pc, #52]	; (8000194 <NEXTION_SendString+0x48>)
 8000160:	f001 fb4c 	bl	80017fc <siprintf>
 8000164:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8000166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000168:	b29a      	uxth	r2, r3
 800016a:	f107 0108 	add.w	r1, r7, #8
 800016e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000172:	4809      	ldr	r0, [pc, #36]	; (8000198 <NEXTION_SendString+0x4c>)
 8000174:	f001 f930 	bl	80013d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8000178:	2364      	movs	r3, #100	; 0x64
 800017a:	2203      	movs	r2, #3
 800017c:	4907      	ldr	r1, [pc, #28]	; (800019c <NEXTION_SendString+0x50>)
 800017e:	4806      	ldr	r0, [pc, #24]	; (8000198 <NEXTION_SendString+0x4c>)
 8000180:	f001 f92a 	bl	80013d8 <HAL_UART_Transmit>
	HAL_Delay (1000);
 8000184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000188:	f000 fa3a 	bl	8000600 <HAL_Delay>
}
 800018c:	bf00      	nop
 800018e:	3740      	adds	r7, #64	; 0x40
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	08002178 	.word	0x08002178
 8000198:	2000007c 	.word	0x2000007c
 800019c:	20000000 	.word	0x20000000

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b088      	sub	sp, #32
 80001a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a6:	f000 f9c9 	bl	800053c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001aa:	f000 f827 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ae:	f000 f895 	bl	80002dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001b2:	f000 f869 	bl	8000288 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data[30]={};
 80001b6:	2300      	movs	r3, #0
 80001b8:	603b      	str	r3, [r7, #0]
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
 80001c8:	615a      	str	r2, [r3, #20]
 80001ca:	831a      	strh	r2, [r3, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart1, data, 30, 1000);
 80001cc:	4639      	mov	r1, r7
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	221e      	movs	r2, #30
 80001d4:	4805      	ldr	r0, [pc, #20]	; (80001ec <main+0x4c>)
 80001d6:	f001 f982 	bl	80014de <HAL_UART_Receive>

	  NEXTION_SendString("t0", "Hello");
 80001da:	4905      	ldr	r1, [pc, #20]	; (80001f0 <main+0x50>)
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <main+0x54>)
 80001de:	f7ff ffb5 	bl	800014c <NEXTION_SendString>
	  NEXTION_SendString("t0", "World");
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <main+0x58>)
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <main+0x54>)
 80001e6:	f7ff ffb1 	bl	800014c <NEXTION_SendString>
	  HAL_UART_Receive(&huart1, data, 30, 1000);
 80001ea:	e7ef      	b.n	80001cc <main+0x2c>
 80001ec:	2000007c 	.word	0x2000007c
 80001f0:	08002184 	.word	0x08002184
 80001f4:	0800218c 	.word	0x0800218c
 80001f8:	08002190 	.word	0x08002190

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fb16 	bl	800183c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fc67 	bl	8000b18 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000250:	f000 f866 	bl	8000320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fed4 	bl	800101c <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800027a:	f000 f851 	bl	8000320 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 800028e:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <MX_USART1_UART_Init+0x50>)
 8000290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 8000294:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f001 f83a 	bl	8001338 <HAL_UART_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ca:	f000 f829 	bl	8000320 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000007c 	.word	0x2000007c
 80002d8:	40013800 	.word	0x40013800

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_GPIO_Init+0x40>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <MX_GPIO_Init+0x40>)
 80002e8:	f043 0320 	orr.w	r3, r3, #32
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_GPIO_Init+0x40>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f003 0320 	and.w	r3, r3, #32
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_GPIO_Init+0x40>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a07      	ldr	r2, [pc, #28]	; (800031c <MX_GPIO_Init+0x40>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <MX_GPIO_Init+0x40>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	683b      	ldr	r3, [r7, #0]

}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_MspInit+0x5c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a14      	ldr	r2, [pc, #80]	; (8000388 <HAL_MspInit+0x5c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <HAL_MspInit+0x5c>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <HAL_MspInit+0x5c>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <HAL_MspInit+0x60>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_MspInit+0x60>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	40010000 	.word	0x40010000

08000390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <HAL_UART_MspInit+0x8c>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d131      	bne.n	8000414 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e6:	2302      	movs	r3, #2
 80003e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ea:	2303      	movs	r3, #3
 80003ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <HAL_UART_MspInit+0x94>)
 80003f6:	f000 fa0b 	bl	8000810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <HAL_UART_MspInit+0x94>)
 8000410:	f000 f9fe 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40013800 	.word	0x40013800
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046e:	f000 f8ab 	bl	80005c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000480:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <_sbrk+0x5c>)
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <_sbrk+0x60>)
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <_sbrk+0x64>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d102      	bne.n	800049a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <_sbrk+0x64>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <_sbrk+0x68>)
 8000498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	693a      	ldr	r2, [r7, #16]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d207      	bcs.n	80004b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a8:	f001 f9d0 	bl	800184c <__errno>
 80004ac:	4603      	mov	r3, r0
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	e009      	b.n	80004cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <_sbrk+0x64>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <_sbrk+0x64>)
 80004c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20005000 	.word	0x20005000
 80004d8:	00000400 	.word	0x00000400
 80004dc:	200000c4 	.word	0x200000c4
 80004e0:	20000218 	.word	0x20000218

080004e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f0:	f7ff fff8 	bl	80004e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004f6:	490c      	ldr	r1, [pc, #48]	; (8000528 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004f8:	4a0c      	ldr	r2, [pc, #48]	; (800052c <LoopFillZerobss+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800050c:	4c09      	ldr	r4, [pc, #36]	; (8000534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051a:	f001 f99d 	bl	8001858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fe3f 	bl	80001a0 <main>
  bx lr
 8000522:	4770      	bx	lr
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800052c:	08002200 	.word	0x08002200
  ldr r2, =_sbss
 8000530:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000534:	20000214 	.word	0x20000214

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_Init+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_Init+0x28>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f92b 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	200f      	movs	r0, #15
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f7ff fee8 	bl	800032c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40022000 	.word	0x40022000

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f935 	bl	80007f6 <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f90b 	bl	80007be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000004 	.word	0x20000004
 80005c0:	2000000c 	.word	0x2000000c
 80005c4:	20000008 	.word	0x20000008

080005c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_IncTick+0x1c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x20>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <HAL_IncTick+0x20>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	2000000c 	.word	0x2000000c
 80005e8:	200000c8 	.word	0x200000c8

080005ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <HAL_GetTick+0x10>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	200000c8 	.word	0x200000c8

08000600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000608:	f7ff fff0 	bl	80005ec <HAL_GetTick>
 800060c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000618:	d005      	beq.n	8000626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Delay+0x44>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000626:	bf00      	nop
 8000628:	f7ff ffe0 	bl	80005ec <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d8f7      	bhi.n	8000628 <HAL_Delay+0x28>
  {
  }
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000000c 	.word	0x2000000c

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff90 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff49 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff5e 	bl	8000690 <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff90 	bl	8000700 <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5f 	bl	80006ac <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffb0 	bl	8000764 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b08b      	sub	sp, #44	; 0x2c
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000822:	e169      	b.n	8000af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000824:	2201      	movs	r2, #1
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	4013      	ands	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	429a      	cmp	r2, r3
 800083e:	f040 8158 	bne.w	8000af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	4a9a      	ldr	r2, [pc, #616]	; (8000ab0 <HAL_GPIO_Init+0x2a0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d05e      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 800084c:	4a98      	ldr	r2, [pc, #608]	; (8000ab0 <HAL_GPIO_Init+0x2a0>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d875      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000852:	4a98      	ldr	r2, [pc, #608]	; (8000ab4 <HAL_GPIO_Init+0x2a4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d058      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000858:	4a96      	ldr	r2, [pc, #600]	; (8000ab4 <HAL_GPIO_Init+0x2a4>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d86f      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800085e:	4a96      	ldr	r2, [pc, #600]	; (8000ab8 <HAL_GPIO_Init+0x2a8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d052      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000864:	4a94      	ldr	r2, [pc, #592]	; (8000ab8 <HAL_GPIO_Init+0x2a8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d869      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800086a:	4a94      	ldr	r2, [pc, #592]	; (8000abc <HAL_GPIO_Init+0x2ac>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d04c      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000870:	4a92      	ldr	r2, [pc, #584]	; (8000abc <HAL_GPIO_Init+0x2ac>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d863      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000876:	4a92      	ldr	r2, [pc, #584]	; (8000ac0 <HAL_GPIO_Init+0x2b0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d046      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 800087c:	4a90      	ldr	r2, [pc, #576]	; (8000ac0 <HAL_GPIO_Init+0x2b0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d85d      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000882:	2b12      	cmp	r3, #18
 8000884:	d82a      	bhi.n	80008dc <HAL_GPIO_Init+0xcc>
 8000886:	2b12      	cmp	r3, #18
 8000888:	d859      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800088a:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <HAL_GPIO_Init+0x80>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	0800090b 	.word	0x0800090b
 8000894:	080008e5 	.word	0x080008e5
 8000898:	080008f7 	.word	0x080008f7
 800089c:	08000939 	.word	0x08000939
 80008a0:	0800093f 	.word	0x0800093f
 80008a4:	0800093f 	.word	0x0800093f
 80008a8:	0800093f 	.word	0x0800093f
 80008ac:	0800093f 	.word	0x0800093f
 80008b0:	0800093f 	.word	0x0800093f
 80008b4:	0800093f 	.word	0x0800093f
 80008b8:	0800093f 	.word	0x0800093f
 80008bc:	0800093f 	.word	0x0800093f
 80008c0:	0800093f 	.word	0x0800093f
 80008c4:	0800093f 	.word	0x0800093f
 80008c8:	0800093f 	.word	0x0800093f
 80008cc:	0800093f 	.word	0x0800093f
 80008d0:	0800093f 	.word	0x0800093f
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	08000901 	.word	0x08000901
 80008dc:	4a79      	ldr	r2, [pc, #484]	; (8000ac4 <HAL_GPIO_Init+0x2b4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d013      	beq.n	800090a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008e2:	e02c      	b.n	800093e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e029      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	3304      	adds	r3, #4
 80008f2:	623b      	str	r3, [r7, #32]
          break;
 80008f4:	e024      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	3308      	adds	r3, #8
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e01f      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	330c      	adds	r3, #12
 8000906:	623b      	str	r3, [r7, #32]
          break;
 8000908:	e01a      	b.n	8000940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000912:	2304      	movs	r3, #4
 8000914:	623b      	str	r3, [r7, #32]
          break;
 8000916:	e013      	b.n	8000940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d105      	bne.n	800092c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	611a      	str	r2, [r3, #16]
          break;
 800092a:	e009      	b.n	8000940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092c:	2308      	movs	r3, #8
 800092e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	615a      	str	r2, [r3, #20]
          break;
 8000936:	e003      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e000      	b.n	8000940 <HAL_GPIO_Init+0x130>
          break;
 800093e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2bff      	cmp	r3, #255	; 0xff
 8000944:	d801      	bhi.n	800094a <HAL_GPIO_Init+0x13a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	e001      	b.n	800094e <HAL_GPIO_Init+0x13e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	2bff      	cmp	r3, #255	; 0xff
 8000954:	d802      	bhi.n	800095c <HAL_GPIO_Init+0x14c>
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	e002      	b.n	8000962 <HAL_GPIO_Init+0x152>
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	3b08      	subs	r3, #8
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	210f      	movs	r1, #15
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	401a      	ands	r2, r3
 8000974:	6a39      	ldr	r1, [r7, #32]
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	431a      	orrs	r2, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 80b1 	beq.w	8000af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000990:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <HAL_GPIO_Init+0x2b8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a4c      	ldr	r2, [pc, #304]	; (8000ac8 <HAL_GPIO_Init+0x2b8>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <HAL_GPIO_Init+0x2b8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009a8:	4a48      	ldr	r2, [pc, #288]	; (8000acc <HAL_GPIO_Init+0x2bc>)
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	220f      	movs	r2, #15
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <HAL_GPIO_Init+0x2c0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d013      	beq.n	80009fc <HAL_GPIO_Init+0x1ec>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d00d      	beq.n	80009f8 <HAL_GPIO_Init+0x1e8>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a3e      	ldr	r2, [pc, #248]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <HAL_GPIO_Init+0x2cc>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d101      	bne.n	80009f0 <HAL_GPIO_Init+0x1e0>
 80009ec:	2303      	movs	r3, #3
 80009ee:	e006      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f0:	2304      	movs	r3, #4
 80009f2:	e004      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f4:	2302      	movs	r3, #2
 80009f6:	e002      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009fc:	2300      	movs	r3, #0
 80009fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a00:	f002 0203 	and.w	r2, r2, #3
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	4093      	lsls	r3, r2
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a0e:	492f      	ldr	r1, [pc, #188]	; (8000acc <HAL_GPIO_Init+0x2bc>)
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	3302      	adds	r3, #2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	492c      	ldr	r1, [pc, #176]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	608b      	str	r3, [r1, #8]
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4928      	ldr	r1, [pc, #160]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	4922      	ldr	r1, [pc, #136]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60cb      	str	r3, [r1, #12]
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a60:	68da      	ldr	r2, [r3, #12]
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	491e      	ldr	r1, [pc, #120]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	4918      	ldr	r1, [pc, #96]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	604b      	str	r3, [r1, #4]
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4914      	ldr	r1, [pc, #80]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	600b      	str	r3, [r1, #0]
 8000aac:	e021      	b.n	8000af2 <HAL_GPIO_Init+0x2e2>
 8000aae:	bf00      	nop
 8000ab0:	10320000 	.word	0x10320000
 8000ab4:	10310000 	.word	0x10310000
 8000ab8:	10220000 	.word	0x10220000
 8000abc:	10210000 	.word	0x10210000
 8000ac0:	10120000 	.word	0x10120000
 8000ac4:	10110000 	.word	0x10110000
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40011400 	.word	0x40011400
 8000ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4909      	ldr	r1, [pc, #36]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f ae8e 	bne.w	8000824 <HAL_GPIO_Init+0x14>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	372c      	adds	r7, #44	; 0x2c
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40010400 	.word	0x40010400

08000b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e272      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 8087 	beq.w	8000c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b38:	4b92      	ldr	r3, [pc, #584]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d00c      	beq.n	8000b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b44:	4b8f      	ldr	r3, [pc, #572]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 030c 	and.w	r3, r3, #12
 8000b4c:	2b08      	cmp	r3, #8
 8000b4e:	d112      	bne.n	8000b76 <HAL_RCC_OscConfig+0x5e>
 8000b50:	4b8c      	ldr	r3, [pc, #560]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b5c:	d10b      	bne.n	8000b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5e:	4b89      	ldr	r3, [pc, #548]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d06c      	beq.n	8000c44 <HAL_RCC_OscConfig+0x12c>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d168      	bne.n	8000c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e24c      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b7e:	d106      	bne.n	8000b8e <HAL_RCC_OscConfig+0x76>
 8000b80:	4b80      	ldr	r3, [pc, #512]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a7f      	ldr	r2, [pc, #508]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e02e      	b.n	8000bec <HAL_RCC_OscConfig+0xd4>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10c      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x98>
 8000b96:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a7a      	ldr	r2, [pc, #488]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b78      	ldr	r3, [pc, #480]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a77      	ldr	r2, [pc, #476]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e01d      	b.n	8000bec <HAL_RCC_OscConfig+0xd4>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bb8:	d10c      	bne.n	8000bd4 <HAL_RCC_OscConfig+0xbc>
 8000bba:	4b72      	ldr	r3, [pc, #456]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a71      	ldr	r2, [pc, #452]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a6e      	ldr	r2, [pc, #440]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e00b      	b.n	8000bec <HAL_RCC_OscConfig+0xd4>
 8000bd4:	4b6b      	ldr	r3, [pc, #428]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a6a      	ldr	r2, [pc, #424]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b68      	ldr	r3, [pc, #416]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a67      	ldr	r2, [pc, #412]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d013      	beq.n	8000c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fcfa 	bl	80005ec <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fcf6 	bl	80005ec <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e200      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	4b5d      	ldr	r3, [pc, #372]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f0      	beq.n	8000bfc <HAL_RCC_OscConfig+0xe4>
 8000c1a:	e014      	b.n	8000c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fce6 	bl	80005ec <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff fce2 	bl	80005ec <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b64      	cmp	r3, #100	; 0x64
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e1ec      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f0      	bne.n	8000c24 <HAL_RCC_OscConfig+0x10c>
 8000c42:	e000      	b.n	8000c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d063      	beq.n	8000d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c52:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00b      	beq.n	8000c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c5e:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d11c      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x18c>
 8000c6a:	4b46      	ldr	r3, [pc, #280]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d116      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <HAL_RCC_OscConfig+0x176>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d001      	beq.n	8000c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e1c0      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8e:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4939      	ldr	r1, [pc, #228]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca2:	e03a      	b.n	8000d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d020      	beq.n	8000cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <HAL_RCC_OscConfig+0x270>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fc9b 	bl	80005ec <HAL_GetTick>
 8000cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	e008      	b.n	8000ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cba:	f7ff fc97 	bl	80005ec <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d901      	bls.n	8000ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e1a1      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f0      	beq.n	8000cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4927      	ldr	r1, [pc, #156]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
 8000cec:	e015      	b.n	8000d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <HAL_RCC_OscConfig+0x270>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fc7a 	bl	80005ec <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfc:	f7ff fc76 	bl	80005ec <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e180      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f0      	bne.n	8000cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d03a      	beq.n	8000d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d019      	beq.n	8000d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_RCC_OscConfig+0x274>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d34:	f7ff fc5a 	bl	80005ec <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc56 	bl	80005ec <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e160      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f0      	beq.n	8000d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f000 face 	bl	80012fc <RCC_Delay>
 8000d60:	e01c      	b.n	8000d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_RCC_OscConfig+0x274>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d68:	f7ff fc40 	bl	80005ec <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d6e:	e00f      	b.n	8000d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d70:	f7ff fc3c 	bl	80005ec <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d908      	bls.n	8000d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e146      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	42420000 	.word	0x42420000
 8000d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d90:	4b92      	ldr	r3, [pc, #584]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1e9      	bne.n	8000d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 80a6 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dae:	4b8b      	ldr	r3, [pc, #556]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10d      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b88      	ldr	r3, [pc, #544]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a87      	ldr	r2, [pc, #540]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b85      	ldr	r3, [pc, #532]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd6:	4b82      	ldr	r3, [pc, #520]	; (8000fe0 <HAL_RCC_OscConfig+0x4c8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d118      	bne.n	8000e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000de2:	4b7f      	ldr	r3, [pc, #508]	; (8000fe0 <HAL_RCC_OscConfig+0x4c8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a7e      	ldr	r2, [pc, #504]	; (8000fe0 <HAL_RCC_OscConfig+0x4c8>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dee:	f7ff fbfd 	bl	80005ec <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000df6:	f7ff fbf9 	bl	80005ec <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b64      	cmp	r3, #100	; 0x64
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e103      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e08:	4b75      	ldr	r3, [pc, #468]	; (8000fe0 <HAL_RCC_OscConfig+0x4c8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d106      	bne.n	8000e2a <HAL_RCC_OscConfig+0x312>
 8000e1c:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	4a6e      	ldr	r2, [pc, #440]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6213      	str	r3, [r2, #32]
 8000e28:	e02d      	b.n	8000e86 <HAL_RCC_OscConfig+0x36e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x334>
 8000e32:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4a69      	ldr	r2, [pc, #420]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	6213      	str	r3, [r2, #32]
 8000e3e:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	4a66      	ldr	r2, [pc, #408]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	f023 0304 	bic.w	r3, r3, #4
 8000e48:	6213      	str	r3, [r2, #32]
 8000e4a:	e01c      	b.n	8000e86 <HAL_RCC_OscConfig+0x36e>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d10c      	bne.n	8000e6e <HAL_RCC_OscConfig+0x356>
 8000e54:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	4a60      	ldr	r2, [pc, #384]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6213      	str	r3, [r2, #32]
 8000e60:	4b5e      	ldr	r3, [pc, #376]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4a5d      	ldr	r2, [pc, #372]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6213      	str	r3, [r2, #32]
 8000e6c:	e00b      	b.n	8000e86 <HAL_RCC_OscConfig+0x36e>
 8000e6e:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4a5a      	ldr	r2, [pc, #360]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6213      	str	r3, [r2, #32]
 8000e7a:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a57      	ldr	r2, [pc, #348]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 0304 	bic.w	r3, r3, #4
 8000e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d015      	beq.n	8000eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fbad 	bl	80005ec <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e94:	e00a      	b.n	8000eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fba9 	bl	80005ec <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e0b1      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eac:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0ee      	beq.n	8000e96 <HAL_RCC_OscConfig+0x37e>
 8000eb8:	e014      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fb97 	bl	80005ec <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec0:	e00a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fb93 	bl	80005ec <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e09b      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed8:	4b40      	ldr	r3, [pc, #256]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1ee      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d105      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a3b      	ldr	r2, [pc, #236]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8087 	beq.w	800100e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d061      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d146      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <HAL_RCC_OscConfig+0x4cc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fb67 	bl	80005ec <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f22:	f7ff fb63 	bl	80005ec <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e06d      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f0      	bne.n	8000f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d108      	bne.n	8000f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4921      	ldr	r1, [pc, #132]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a19      	ldr	r1, [r3, #32]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_RCC_OscConfig+0x4cc>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb37 	bl	80005ec <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f82:	f7ff fb33 	bl	80005ec <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e03d      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f0      	beq.n	8000f82 <HAL_RCC_OscConfig+0x46a>
 8000fa0:	e035      	b.n	800100e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_RCC_OscConfig+0x4cc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fb20 	bl	80005ec <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb0:	f7ff fb1c 	bl	80005ec <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e026      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x498>
 8000fce:	e01e      	b.n	800100e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d107      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e019      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_RCC_OscConfig+0x500>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001006:	429a      	cmp	r2, r3
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0d0      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001030:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d910      	bls.n	8001060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103e:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 0207 	bic.w	r2, r3, #7
 8001046:	4965      	ldr	r1, [pc, #404]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	4313      	orrs	r3, r2
 800104c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104e:	4b63      	ldr	r3, [pc, #396]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d001      	beq.n	8001060 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e0b8      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d020      	beq.n	80010ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001078:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a58      	ldr	r2, [pc, #352]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001082:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001090:	4b53      	ldr	r3, [pc, #332]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a52      	ldr	r2, [pc, #328]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800109a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800109c:	4b50      	ldr	r3, [pc, #320]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	494d      	ldr	r1, [pc, #308]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d040      	beq.n	800113c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d115      	bne.n	80010fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e07f      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d107      	bne.n	80010ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010da:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e073      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e06b      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fa:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f023 0203 	bic.w	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4936      	ldr	r1, [pc, #216]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800110c:	f7ff fa6e 	bl	80005ec <HAL_GetTick>
 8001110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	e00a      	b.n	800112a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001114:	f7ff fa6a 	bl	80005ec <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001122:	4293      	cmp	r3, r2
 8001124:	d901      	bls.n	800112a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e053      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 020c 	and.w	r2, r3, #12
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	429a      	cmp	r2, r3
 800113a:	d1eb      	bne.n	8001114 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d210      	bcs.n	800116c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 0207 	bic.w	r2, r3, #7
 8001152:	4922      	ldr	r1, [pc, #136]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e032      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4916      	ldr	r1, [pc, #88]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d009      	beq.n	80011aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	490e      	ldr	r1, [pc, #56]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011aa:	f000 f821 	bl	80011f0 <HAL_RCC_GetSysClockFreq>
 80011ae:	4602      	mov	r2, r0
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	490a      	ldr	r1, [pc, #40]	; (80011e4 <HAL_RCC_ClockConfig+0x1c8>)
 80011bc:	5ccb      	ldrb	r3, [r1, r3]
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <HAL_RCC_ClockConfig+0x1cc>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_RCC_ClockConfig+0x1d0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9cc 	bl	8000568 <HAL_InitTick>

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	08002198 	.word	0x08002198
 80011e8:	20000004 	.word	0x20000004
 80011ec:	20000008 	.word	0x20000008

080011f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_RCC_GetSysClockFreq+0x94>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d002      	beq.n	8001220 <HAL_RCC_GetSysClockFreq+0x30>
 800121a:	2b08      	cmp	r3, #8
 800121c:	d003      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0x36>
 800121e:	e027      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_RCC_GetSysClockFreq+0x98>)
 8001222:	613b      	str	r3, [r7, #16]
      break;
 8001224:	e027      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	0c9b      	lsrs	r3, r3, #18
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d010      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_RCC_GetSysClockFreq+0x94>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	0c5b      	lsrs	r3, r3, #17
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_RCC_GetSysClockFreq+0xa0>)
 800124a:	5cd3      	ldrb	r3, [r2, r3]
 800124c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_RCC_GetSysClockFreq+0x98>)
 8001252:	fb03 f202 	mul.w	r2, r3, r2
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e004      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	613b      	str	r3, [r7, #16]
      break;
 800126e:	e002      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_RCC_GetSysClockFreq+0x98>)
 8001272:	613b      	str	r3, [r7, #16]
      break;
 8001274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001276:	693b      	ldr	r3, [r7, #16]
}
 8001278:	4618      	mov	r0, r3
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	007a1200 	.word	0x007a1200
 800128c:	080021b0 	.word	0x080021b0
 8001290:	080021c0 	.word	0x080021c0
 8001294:	003d0900 	.word	0x003d0900

08001298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012b0:	f7ff fff2 	bl	8001298 <HAL_RCC_GetHCLKFreq>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	4903      	ldr	r1, [pc, #12]	; (80012d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012c2:	5ccb      	ldrb	r3, [r1, r3]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	080021a8 	.word	0x080021a8

080012d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012d8:	f7ff ffde 	bl	8001298 <HAL_RCC_GetHCLKFreq>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	0adb      	lsrs	r3, r3, #11
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	4903      	ldr	r1, [pc, #12]	; (80012f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ea:	5ccb      	ldrb	r3, [r1, r3]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	080021a8 	.word	0x080021a8

080012fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <RCC_Delay+0x34>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <RCC_Delay+0x38>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0a5b      	lsrs	r3, r3, #9
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001318:	bf00      	nop
  }
  while (Delay --);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	60fa      	str	r2, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f9      	bne.n	8001318 <RCC_Delay+0x1c>
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000004 	.word	0x20000004
 8001334:	10624dd3 	.word	0x10624dd3

08001338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e042      	b.n	80013d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff f816 	bl	8000390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800137a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f9af 	bl	80016e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2220      	movs	r2, #32
 80013bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	d16d      	bne.n	80014d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_UART_Transmit+0x2c>
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e066      	b.n	80014d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2221      	movs	r2, #33	; 0x21
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001416:	f7ff f8e9 	bl	80005ec <HAL_GetTick>
 800141a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	88fa      	ldrh	r2, [r7, #6]
 8001420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001430:	d108      	bne.n	8001444 <HAL_UART_Transmit+0x6c>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d104      	bne.n	8001444 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e003      	b.n	800144c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800144c:	e02a      	b.n	80014a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2200      	movs	r2, #0
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f8d2 	bl	8001602 <UART_WaitOnFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e036      	b.n	80014d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10b      	bne.n	8001486 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800147c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	3302      	adds	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	e007      	b.n	8001496 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	781a      	ldrb	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	3301      	adds	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800149a:	b29b      	uxth	r3, r3
 800149c:	3b01      	subs	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1cf      	bne.n	800144e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f8a2 	bl	8001602 <UART_WaitOnFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e006      	b.n	80014d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2220      	movs	r2, #32
 80014cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e000      	b.n	80014d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80014d4:	2302      	movs	r3, #2
  }
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b08a      	sub	sp, #40	; 0x28
 80014e2:	af02      	add	r7, sp, #8
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	d17c      	bne.n	80015f8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HAL_UART_Receive+0x2c>
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e075      	b.n	80015fa <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2222      	movs	r2, #34	; 0x22
 8001518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001522:	f7ff f863 	bl	80005ec <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	88fa      	ldrh	r2, [r7, #6]
 8001532:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800153c:	d108      	bne.n	8001550 <HAL_UART_Receive+0x72>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	e003      	b.n	8001558 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001558:	e043      	b.n	80015e2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2200      	movs	r2, #0
 8001562:	2120      	movs	r1, #32
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f84c 	bl	8001602 <UART_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e042      	b.n	80015fa <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	b29b      	uxth	r3, r3
 8001582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001586:	b29a      	uxth	r2, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	3302      	adds	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e01f      	b.n	80015d4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800159c:	d007      	beq.n	80015ae <HAL_UART_Receive+0xd0>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <HAL_UART_Receive+0xde>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e008      	b.n	80015ce <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3301      	adds	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1b6      	bne.n	800155a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e000      	b.n	80015fa <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80015f8:	2302      	movs	r3, #2
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b090      	sub	sp, #64	; 0x40
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4613      	mov	r3, r2
 8001610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001612:	e050      	b.n	80016b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161a:	d04c      	beq.n	80016b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800161c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <UART_WaitOnFlagUntilTimeout+0x30>
 8001622:	f7fe ffe3 	bl	80005ec <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800162e:	429a      	cmp	r2, r3
 8001630:	d241      	bcs.n	80016b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	330c      	adds	r3, #12
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	e853 3f00 	ldrex	r3, [r3]
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	330c      	adds	r3, #12
 8001650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001652:	637a      	str	r2, [r7, #52]	; 0x34
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800165a:	e841 2300 	strex	r3, r2, [r1]
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e5      	bne.n	8001632 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3314      	adds	r3, #20
 800166c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	e853 3f00 	ldrex	r3, [r3]
 8001674:	613b      	str	r3, [r7, #16]
   return(result);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3314      	adds	r3, #20
 8001684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001686:	623a      	str	r2, [r7, #32]
 8001688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800168a:	69f9      	ldr	r1, [r7, #28]
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	e841 2300 	strex	r3, r2, [r1]
 8001692:	61bb      	str	r3, [r7, #24]
   return(result);
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1e5      	bne.n	8001666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e00f      	b.n	80016d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4013      	ands	r3, r2
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d09f      	beq.n	8001614 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3740      	adds	r7, #64	; 0x40
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800171a:	f023 030c 	bic.w	r3, r3, #12
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	430b      	orrs	r3, r1
 8001726:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <UART_SetConfig+0x114>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d103      	bne.n	8001750 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001748:	f7ff fdc4 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	e002      	b.n	8001756 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001750:	f7ff fdac 	bl	80012ac <HAL_RCC_GetPCLK1Freq>
 8001754:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009a      	lsls	r2, r3, #2
 8001760:	441a      	add	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fbb2 f3f3 	udiv	r3, r2, r3
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <UART_SetConfig+0x118>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	0119      	lsls	r1, r3, #4
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009a      	lsls	r2, r3, #2
 8001780:	441a      	add	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fbb2 f2f3 	udiv	r2, r2, r3
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <UART_SetConfig+0x118>)
 800178e:	fba3 0302 	umull	r0, r3, r3, r2
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2064      	movs	r0, #100	; 0x64
 8001796:	fb00 f303 	mul.w	r3, r0, r3
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	3332      	adds	r3, #50	; 0x32
 80017a0:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <UART_SetConfig+0x118>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ac:	4419      	add	r1, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009a      	lsls	r2, r3, #2
 80017b8:	441a      	add	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <UART_SetConfig+0x118>)
 80017c6:	fba3 0302 	umull	r0, r3, r3, r2
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2064      	movs	r0, #100	; 0x64
 80017ce:	fb00 f303 	mul.w	r3, r0, r3
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	3332      	adds	r3, #50	; 0x32
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <UART_SetConfig+0x118>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	f003 020f 	and.w	r2, r3, #15
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	440a      	add	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013800 	.word	0x40013800
 80017f8:	51eb851f 	.word	0x51eb851f

080017fc <siprintf>:
 80017fc:	b40e      	push	{r1, r2, r3}
 80017fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001802:	b500      	push	{lr}
 8001804:	b09c      	sub	sp, #112	; 0x70
 8001806:	ab1d      	add	r3, sp, #116	; 0x74
 8001808:	9002      	str	r0, [sp, #8]
 800180a:	9006      	str	r0, [sp, #24]
 800180c:	9107      	str	r1, [sp, #28]
 800180e:	9104      	str	r1, [sp, #16]
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <siprintf+0x38>)
 8001812:	4909      	ldr	r1, [pc, #36]	; (8001838 <siprintf+0x3c>)
 8001814:	f853 2b04 	ldr.w	r2, [r3], #4
 8001818:	9105      	str	r1, [sp, #20]
 800181a:	6800      	ldr	r0, [r0, #0]
 800181c:	a902      	add	r1, sp, #8
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f000 f98e 	bl	8001b40 <_svfiprintf_r>
 8001824:	2200      	movs	r2, #0
 8001826:	9b02      	ldr	r3, [sp, #8]
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	b01c      	add	sp, #112	; 0x70
 800182c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001830:	b003      	add	sp, #12
 8001832:	4770      	bx	lr
 8001834:	2000005c 	.word	0x2000005c
 8001838:	ffff0208 	.word	0xffff0208

0800183c <memset>:
 800183c:	4603      	mov	r3, r0
 800183e:	4402      	add	r2, r0
 8001840:	4293      	cmp	r3, r2
 8001842:	d100      	bne.n	8001846 <memset+0xa>
 8001844:	4770      	bx	lr
 8001846:	f803 1b01 	strb.w	r1, [r3], #1
 800184a:	e7f9      	b.n	8001840 <memset+0x4>

0800184c <__errno>:
 800184c:	4b01      	ldr	r3, [pc, #4]	; (8001854 <__errno+0x8>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2000005c 	.word	0x2000005c

08001858 <__libc_init_array>:
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	2600      	movs	r6, #0
 800185c:	4d0c      	ldr	r5, [pc, #48]	; (8001890 <__libc_init_array+0x38>)
 800185e:	4c0d      	ldr	r4, [pc, #52]	; (8001894 <__libc_init_array+0x3c>)
 8001860:	1b64      	subs	r4, r4, r5
 8001862:	10a4      	asrs	r4, r4, #2
 8001864:	42a6      	cmp	r6, r4
 8001866:	d109      	bne.n	800187c <__libc_init_array+0x24>
 8001868:	f000 fc7a 	bl	8002160 <_init>
 800186c:	2600      	movs	r6, #0
 800186e:	4d0a      	ldr	r5, [pc, #40]	; (8001898 <__libc_init_array+0x40>)
 8001870:	4c0a      	ldr	r4, [pc, #40]	; (800189c <__libc_init_array+0x44>)
 8001872:	1b64      	subs	r4, r4, r5
 8001874:	10a4      	asrs	r4, r4, #2
 8001876:	42a6      	cmp	r6, r4
 8001878:	d105      	bne.n	8001886 <__libc_init_array+0x2e>
 800187a:	bd70      	pop	{r4, r5, r6, pc}
 800187c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001880:	4798      	blx	r3
 8001882:	3601      	adds	r6, #1
 8001884:	e7ee      	b.n	8001864 <__libc_init_array+0xc>
 8001886:	f855 3b04 	ldr.w	r3, [r5], #4
 800188a:	4798      	blx	r3
 800188c:	3601      	adds	r6, #1
 800188e:	e7f2      	b.n	8001876 <__libc_init_array+0x1e>
 8001890:	080021f8 	.word	0x080021f8
 8001894:	080021f8 	.word	0x080021f8
 8001898:	080021f8 	.word	0x080021f8
 800189c:	080021fc 	.word	0x080021fc

080018a0 <__retarget_lock_acquire_recursive>:
 80018a0:	4770      	bx	lr

080018a2 <__retarget_lock_release_recursive>:
 80018a2:	4770      	bx	lr

080018a4 <_free_r>:
 80018a4:	b538      	push	{r3, r4, r5, lr}
 80018a6:	4605      	mov	r5, r0
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d040      	beq.n	800192e <_free_r+0x8a>
 80018ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018b0:	1f0c      	subs	r4, r1, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bfb8      	it	lt
 80018b6:	18e4      	addlt	r4, r4, r3
 80018b8:	f000 f8dc 	bl	8001a74 <__malloc_lock>
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <_free_r+0x8c>)
 80018be:	6813      	ldr	r3, [r2, #0]
 80018c0:	b933      	cbnz	r3, 80018d0 <_free_r+0x2c>
 80018c2:	6063      	str	r3, [r4, #4]
 80018c4:	6014      	str	r4, [r2, #0]
 80018c6:	4628      	mov	r0, r5
 80018c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018cc:	f000 b8d8 	b.w	8001a80 <__malloc_unlock>
 80018d0:	42a3      	cmp	r3, r4
 80018d2:	d908      	bls.n	80018e6 <_free_r+0x42>
 80018d4:	6820      	ldr	r0, [r4, #0]
 80018d6:	1821      	adds	r1, r4, r0
 80018d8:	428b      	cmp	r3, r1
 80018da:	bf01      	itttt	eq
 80018dc:	6819      	ldreq	r1, [r3, #0]
 80018de:	685b      	ldreq	r3, [r3, #4]
 80018e0:	1809      	addeq	r1, r1, r0
 80018e2:	6021      	streq	r1, [r4, #0]
 80018e4:	e7ed      	b.n	80018c2 <_free_r+0x1e>
 80018e6:	461a      	mov	r2, r3
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	b10b      	cbz	r3, 80018f0 <_free_r+0x4c>
 80018ec:	42a3      	cmp	r3, r4
 80018ee:	d9fa      	bls.n	80018e6 <_free_r+0x42>
 80018f0:	6811      	ldr	r1, [r2, #0]
 80018f2:	1850      	adds	r0, r2, r1
 80018f4:	42a0      	cmp	r0, r4
 80018f6:	d10b      	bne.n	8001910 <_free_r+0x6c>
 80018f8:	6820      	ldr	r0, [r4, #0]
 80018fa:	4401      	add	r1, r0
 80018fc:	1850      	adds	r0, r2, r1
 80018fe:	4283      	cmp	r3, r0
 8001900:	6011      	str	r1, [r2, #0]
 8001902:	d1e0      	bne.n	80018c6 <_free_r+0x22>
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4408      	add	r0, r1
 800190a:	6010      	str	r0, [r2, #0]
 800190c:	6053      	str	r3, [r2, #4]
 800190e:	e7da      	b.n	80018c6 <_free_r+0x22>
 8001910:	d902      	bls.n	8001918 <_free_r+0x74>
 8001912:	230c      	movs	r3, #12
 8001914:	602b      	str	r3, [r5, #0]
 8001916:	e7d6      	b.n	80018c6 <_free_r+0x22>
 8001918:	6820      	ldr	r0, [r4, #0]
 800191a:	1821      	adds	r1, r4, r0
 800191c:	428b      	cmp	r3, r1
 800191e:	bf01      	itttt	eq
 8001920:	6819      	ldreq	r1, [r3, #0]
 8001922:	685b      	ldreq	r3, [r3, #4]
 8001924:	1809      	addeq	r1, r1, r0
 8001926:	6021      	streq	r1, [r4, #0]
 8001928:	6063      	str	r3, [r4, #4]
 800192a:	6054      	str	r4, [r2, #4]
 800192c:	e7cb      	b.n	80018c6 <_free_r+0x22>
 800192e:	bd38      	pop	{r3, r4, r5, pc}
 8001930:	2000020c 	.word	0x2000020c

08001934 <sbrk_aligned>:
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	4e0e      	ldr	r6, [pc, #56]	; (8001970 <sbrk_aligned+0x3c>)
 8001938:	460c      	mov	r4, r1
 800193a:	6831      	ldr	r1, [r6, #0]
 800193c:	4605      	mov	r5, r0
 800193e:	b911      	cbnz	r1, 8001946 <sbrk_aligned+0x12>
 8001940:	f000 fbaa 	bl	8002098 <_sbrk_r>
 8001944:	6030      	str	r0, [r6, #0]
 8001946:	4621      	mov	r1, r4
 8001948:	4628      	mov	r0, r5
 800194a:	f000 fba5 	bl	8002098 <_sbrk_r>
 800194e:	1c43      	adds	r3, r0, #1
 8001950:	d00a      	beq.n	8001968 <sbrk_aligned+0x34>
 8001952:	1cc4      	adds	r4, r0, #3
 8001954:	f024 0403 	bic.w	r4, r4, #3
 8001958:	42a0      	cmp	r0, r4
 800195a:	d007      	beq.n	800196c <sbrk_aligned+0x38>
 800195c:	1a21      	subs	r1, r4, r0
 800195e:	4628      	mov	r0, r5
 8001960:	f000 fb9a 	bl	8002098 <_sbrk_r>
 8001964:	3001      	adds	r0, #1
 8001966:	d101      	bne.n	800196c <sbrk_aligned+0x38>
 8001968:	f04f 34ff 	mov.w	r4, #4294967295
 800196c:	4620      	mov	r0, r4
 800196e:	bd70      	pop	{r4, r5, r6, pc}
 8001970:	20000210 	.word	0x20000210

08001974 <_malloc_r>:
 8001974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001978:	1ccd      	adds	r5, r1, #3
 800197a:	f025 0503 	bic.w	r5, r5, #3
 800197e:	3508      	adds	r5, #8
 8001980:	2d0c      	cmp	r5, #12
 8001982:	bf38      	it	cc
 8001984:	250c      	movcc	r5, #12
 8001986:	2d00      	cmp	r5, #0
 8001988:	4607      	mov	r7, r0
 800198a:	db01      	blt.n	8001990 <_malloc_r+0x1c>
 800198c:	42a9      	cmp	r1, r5
 800198e:	d905      	bls.n	800199c <_malloc_r+0x28>
 8001990:	230c      	movs	r3, #12
 8001992:	2600      	movs	r6, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4630      	mov	r0, r6
 8001998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800199c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001a70 <_malloc_r+0xfc>
 80019a0:	f000 f868 	bl	8001a74 <__malloc_lock>
 80019a4:	f8d8 3000 	ldr.w	r3, [r8]
 80019a8:	461c      	mov	r4, r3
 80019aa:	bb5c      	cbnz	r4, 8001a04 <_malloc_r+0x90>
 80019ac:	4629      	mov	r1, r5
 80019ae:	4638      	mov	r0, r7
 80019b0:	f7ff ffc0 	bl	8001934 <sbrk_aligned>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	4604      	mov	r4, r0
 80019b8:	d155      	bne.n	8001a66 <_malloc_r+0xf2>
 80019ba:	f8d8 4000 	ldr.w	r4, [r8]
 80019be:	4626      	mov	r6, r4
 80019c0:	2e00      	cmp	r6, #0
 80019c2:	d145      	bne.n	8001a50 <_malloc_r+0xdc>
 80019c4:	2c00      	cmp	r4, #0
 80019c6:	d048      	beq.n	8001a5a <_malloc_r+0xe6>
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	4631      	mov	r1, r6
 80019cc:	4638      	mov	r0, r7
 80019ce:	eb04 0903 	add.w	r9, r4, r3
 80019d2:	f000 fb61 	bl	8002098 <_sbrk_r>
 80019d6:	4581      	cmp	r9, r0
 80019d8:	d13f      	bne.n	8001a5a <_malloc_r+0xe6>
 80019da:	6821      	ldr	r1, [r4, #0]
 80019dc:	4638      	mov	r0, r7
 80019de:	1a6d      	subs	r5, r5, r1
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7ff ffa7 	bl	8001934 <sbrk_aligned>
 80019e6:	3001      	adds	r0, #1
 80019e8:	d037      	beq.n	8001a5a <_malloc_r+0xe6>
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	442b      	add	r3, r5
 80019ee:	6023      	str	r3, [r4, #0]
 80019f0:	f8d8 3000 	ldr.w	r3, [r8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d038      	beq.n	8001a6a <_malloc_r+0xf6>
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	42a2      	cmp	r2, r4
 80019fc:	d12b      	bne.n	8001a56 <_malloc_r+0xe2>
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	e00f      	b.n	8001a24 <_malloc_r+0xb0>
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	1b52      	subs	r2, r2, r5
 8001a08:	d41f      	bmi.n	8001a4a <_malloc_r+0xd6>
 8001a0a:	2a0b      	cmp	r2, #11
 8001a0c:	d917      	bls.n	8001a3e <_malloc_r+0xca>
 8001a0e:	1961      	adds	r1, r4, r5
 8001a10:	42a3      	cmp	r3, r4
 8001a12:	6025      	str	r5, [r4, #0]
 8001a14:	bf18      	it	ne
 8001a16:	6059      	strne	r1, [r3, #4]
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	bf08      	it	eq
 8001a1c:	f8c8 1000 	streq.w	r1, [r8]
 8001a20:	5162      	str	r2, [r4, r5]
 8001a22:	604b      	str	r3, [r1, #4]
 8001a24:	4638      	mov	r0, r7
 8001a26:	f104 060b 	add.w	r6, r4, #11
 8001a2a:	f000 f829 	bl	8001a80 <__malloc_unlock>
 8001a2e:	f026 0607 	bic.w	r6, r6, #7
 8001a32:	1d23      	adds	r3, r4, #4
 8001a34:	1af2      	subs	r2, r6, r3
 8001a36:	d0ae      	beq.n	8001996 <_malloc_r+0x22>
 8001a38:	1b9b      	subs	r3, r3, r6
 8001a3a:	50a3      	str	r3, [r4, r2]
 8001a3c:	e7ab      	b.n	8001996 <_malloc_r+0x22>
 8001a3e:	42a3      	cmp	r3, r4
 8001a40:	6862      	ldr	r2, [r4, #4]
 8001a42:	d1dd      	bne.n	8001a00 <_malloc_r+0x8c>
 8001a44:	f8c8 2000 	str.w	r2, [r8]
 8001a48:	e7ec      	b.n	8001a24 <_malloc_r+0xb0>
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	6864      	ldr	r4, [r4, #4]
 8001a4e:	e7ac      	b.n	80019aa <_malloc_r+0x36>
 8001a50:	4634      	mov	r4, r6
 8001a52:	6876      	ldr	r6, [r6, #4]
 8001a54:	e7b4      	b.n	80019c0 <_malloc_r+0x4c>
 8001a56:	4613      	mov	r3, r2
 8001a58:	e7cc      	b.n	80019f4 <_malloc_r+0x80>
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	4638      	mov	r0, r7
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	f000 f80e 	bl	8001a80 <__malloc_unlock>
 8001a64:	e797      	b.n	8001996 <_malloc_r+0x22>
 8001a66:	6025      	str	r5, [r4, #0]
 8001a68:	e7dc      	b.n	8001a24 <_malloc_r+0xb0>
 8001a6a:	605b      	str	r3, [r3, #4]
 8001a6c:	deff      	udf	#255	; 0xff
 8001a6e:	bf00      	nop
 8001a70:	2000020c 	.word	0x2000020c

08001a74 <__malloc_lock>:
 8001a74:	4801      	ldr	r0, [pc, #4]	; (8001a7c <__malloc_lock+0x8>)
 8001a76:	f7ff bf13 	b.w	80018a0 <__retarget_lock_acquire_recursive>
 8001a7a:	bf00      	nop
 8001a7c:	20000208 	.word	0x20000208

08001a80 <__malloc_unlock>:
 8001a80:	4801      	ldr	r0, [pc, #4]	; (8001a88 <__malloc_unlock+0x8>)
 8001a82:	f7ff bf0e 	b.w	80018a2 <__retarget_lock_release_recursive>
 8001a86:	bf00      	nop
 8001a88:	20000208 	.word	0x20000208

08001a8c <__ssputs_r>:
 8001a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a90:	461f      	mov	r7, r3
 8001a92:	688e      	ldr	r6, [r1, #8]
 8001a94:	4682      	mov	sl, r0
 8001a96:	42be      	cmp	r6, r7
 8001a98:	460c      	mov	r4, r1
 8001a9a:	4690      	mov	r8, r2
 8001a9c:	680b      	ldr	r3, [r1, #0]
 8001a9e:	d82c      	bhi.n	8001afa <__ssputs_r+0x6e>
 8001aa0:	898a      	ldrh	r2, [r1, #12]
 8001aa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001aa6:	d026      	beq.n	8001af6 <__ssputs_r+0x6a>
 8001aa8:	6965      	ldr	r5, [r4, #20]
 8001aaa:	6909      	ldr	r1, [r1, #16]
 8001aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ab0:	eba3 0901 	sub.w	r9, r3, r1
 8001ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ab8:	1c7b      	adds	r3, r7, #1
 8001aba:	444b      	add	r3, r9
 8001abc:	106d      	asrs	r5, r5, #1
 8001abe:	429d      	cmp	r5, r3
 8001ac0:	bf38      	it	cc
 8001ac2:	461d      	movcc	r5, r3
 8001ac4:	0553      	lsls	r3, r2, #21
 8001ac6:	d527      	bpl.n	8001b18 <__ssputs_r+0x8c>
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7ff ff53 	bl	8001974 <_malloc_r>
 8001ace:	4606      	mov	r6, r0
 8001ad0:	b360      	cbz	r0, 8001b2c <__ssputs_r+0xa0>
 8001ad2:	464a      	mov	r2, r9
 8001ad4:	6921      	ldr	r1, [r4, #16]
 8001ad6:	f000 fafd 	bl	80020d4 <memcpy>
 8001ada:	89a3      	ldrh	r3, [r4, #12]
 8001adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	81a3      	strh	r3, [r4, #12]
 8001ae6:	6126      	str	r6, [r4, #16]
 8001ae8:	444e      	add	r6, r9
 8001aea:	6026      	str	r6, [r4, #0]
 8001aec:	463e      	mov	r6, r7
 8001aee:	6165      	str	r5, [r4, #20]
 8001af0:	eba5 0509 	sub.w	r5, r5, r9
 8001af4:	60a5      	str	r5, [r4, #8]
 8001af6:	42be      	cmp	r6, r7
 8001af8:	d900      	bls.n	8001afc <__ssputs_r+0x70>
 8001afa:	463e      	mov	r6, r7
 8001afc:	4632      	mov	r2, r6
 8001afe:	4641      	mov	r1, r8
 8001b00:	6820      	ldr	r0, [r4, #0]
 8001b02:	f000 faaf 	bl	8002064 <memmove>
 8001b06:	2000      	movs	r0, #0
 8001b08:	68a3      	ldr	r3, [r4, #8]
 8001b0a:	1b9b      	subs	r3, r3, r6
 8001b0c:	60a3      	str	r3, [r4, #8]
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	4433      	add	r3, r6
 8001b12:	6023      	str	r3, [r4, #0]
 8001b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b18:	462a      	mov	r2, r5
 8001b1a:	f000 fae9 	bl	80020f0 <_realloc_r>
 8001b1e:	4606      	mov	r6, r0
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d1e0      	bne.n	8001ae6 <__ssputs_r+0x5a>
 8001b24:	4650      	mov	r0, sl
 8001b26:	6921      	ldr	r1, [r4, #16]
 8001b28:	f7ff febc 	bl	80018a4 <_free_r>
 8001b2c:	230c      	movs	r3, #12
 8001b2e:	f8ca 3000 	str.w	r3, [sl]
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3c:	81a3      	strh	r3, [r4, #12]
 8001b3e:	e7e9      	b.n	8001b14 <__ssputs_r+0x88>

08001b40 <_svfiprintf_r>:
 8001b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b44:	4698      	mov	r8, r3
 8001b46:	898b      	ldrh	r3, [r1, #12]
 8001b48:	4607      	mov	r7, r0
 8001b4a:	061b      	lsls	r3, r3, #24
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	b09d      	sub	sp, #116	; 0x74
 8001b52:	d50e      	bpl.n	8001b72 <_svfiprintf_r+0x32>
 8001b54:	690b      	ldr	r3, [r1, #16]
 8001b56:	b963      	cbnz	r3, 8001b72 <_svfiprintf_r+0x32>
 8001b58:	2140      	movs	r1, #64	; 0x40
 8001b5a:	f7ff ff0b 	bl	8001974 <_malloc_r>
 8001b5e:	6028      	str	r0, [r5, #0]
 8001b60:	6128      	str	r0, [r5, #16]
 8001b62:	b920      	cbnz	r0, 8001b6e <_svfiprintf_r+0x2e>
 8001b64:	230c      	movs	r3, #12
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	e0d0      	b.n	8001d10 <_svfiprintf_r+0x1d0>
 8001b6e:	2340      	movs	r3, #64	; 0x40
 8001b70:	616b      	str	r3, [r5, #20]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9309      	str	r3, [sp, #36]	; 0x24
 8001b76:	2320      	movs	r3, #32
 8001b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b7c:	2330      	movs	r3, #48	; 0x30
 8001b7e:	f04f 0901 	mov.w	r9, #1
 8001b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b86:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001d28 <_svfiprintf_r+0x1e8>
 8001b8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b8e:	4623      	mov	r3, r4
 8001b90:	469a      	mov	sl, r3
 8001b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b96:	b10a      	cbz	r2, 8001b9c <_svfiprintf_r+0x5c>
 8001b98:	2a25      	cmp	r2, #37	; 0x25
 8001b9a:	d1f9      	bne.n	8001b90 <_svfiprintf_r+0x50>
 8001b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8001ba0:	d00b      	beq.n	8001bba <_svfiprintf_r+0x7a>
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	4622      	mov	r2, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4638      	mov	r0, r7
 8001baa:	f7ff ff6f 	bl	8001a8c <__ssputs_r>
 8001bae:	3001      	adds	r0, #1
 8001bb0:	f000 80a9 	beq.w	8001d06 <_svfiprintf_r+0x1c6>
 8001bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bb6:	445a      	add	r2, fp
 8001bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8001bba:	f89a 3000 	ldrb.w	r3, [sl]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80a1 	beq.w	8001d06 <_svfiprintf_r+0x1c6>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bce:	f10a 0a01 	add.w	sl, sl, #1
 8001bd2:	9304      	str	r3, [sp, #16]
 8001bd4:	9307      	str	r3, [sp, #28]
 8001bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bda:	931a      	str	r3, [sp, #104]	; 0x68
 8001bdc:	4654      	mov	r4, sl
 8001bde:	2205      	movs	r2, #5
 8001be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001be4:	4850      	ldr	r0, [pc, #320]	; (8001d28 <_svfiprintf_r+0x1e8>)
 8001be6:	f000 fa67 	bl	80020b8 <memchr>
 8001bea:	9a04      	ldr	r2, [sp, #16]
 8001bec:	b9d8      	cbnz	r0, 8001c26 <_svfiprintf_r+0xe6>
 8001bee:	06d0      	lsls	r0, r2, #27
 8001bf0:	bf44      	itt	mi
 8001bf2:	2320      	movmi	r3, #32
 8001bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bf8:	0711      	lsls	r1, r2, #28
 8001bfa:	bf44      	itt	mi
 8001bfc:	232b      	movmi	r3, #43	; 0x2b
 8001bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c02:	f89a 3000 	ldrb.w	r3, [sl]
 8001c06:	2b2a      	cmp	r3, #42	; 0x2a
 8001c08:	d015      	beq.n	8001c36 <_svfiprintf_r+0xf6>
 8001c0a:	4654      	mov	r4, sl
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f04f 0c0a 	mov.w	ip, #10
 8001c12:	9a07      	ldr	r2, [sp, #28]
 8001c14:	4621      	mov	r1, r4
 8001c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c1a:	3b30      	subs	r3, #48	; 0x30
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d94d      	bls.n	8001cbc <_svfiprintf_r+0x17c>
 8001c20:	b1b0      	cbz	r0, 8001c50 <_svfiprintf_r+0x110>
 8001c22:	9207      	str	r2, [sp, #28]
 8001c24:	e014      	b.n	8001c50 <_svfiprintf_r+0x110>
 8001c26:	eba0 0308 	sub.w	r3, r0, r8
 8001c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	46a2      	mov	sl, r4
 8001c32:	9304      	str	r3, [sp, #16]
 8001c34:	e7d2      	b.n	8001bdc <_svfiprintf_r+0x9c>
 8001c36:	9b03      	ldr	r3, [sp, #12]
 8001c38:	1d19      	adds	r1, r3, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	9103      	str	r1, [sp, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bfbb      	ittet	lt
 8001c42:	425b      	neglt	r3, r3
 8001c44:	f042 0202 	orrlt.w	r2, r2, #2
 8001c48:	9307      	strge	r3, [sp, #28]
 8001c4a:	9307      	strlt	r3, [sp, #28]
 8001c4c:	bfb8      	it	lt
 8001c4e:	9204      	strlt	r2, [sp, #16]
 8001c50:	7823      	ldrb	r3, [r4, #0]
 8001c52:	2b2e      	cmp	r3, #46	; 0x2e
 8001c54:	d10c      	bne.n	8001c70 <_svfiprintf_r+0x130>
 8001c56:	7863      	ldrb	r3, [r4, #1]
 8001c58:	2b2a      	cmp	r3, #42	; 0x2a
 8001c5a:	d134      	bne.n	8001cc6 <_svfiprintf_r+0x186>
 8001c5c:	9b03      	ldr	r3, [sp, #12]
 8001c5e:	3402      	adds	r4, #2
 8001c60:	1d1a      	adds	r2, r3, #4
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	9203      	str	r2, [sp, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bfb8      	it	lt
 8001c6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c6e:	9305      	str	r3, [sp, #20]
 8001c70:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001d2c <_svfiprintf_r+0x1ec>
 8001c74:	2203      	movs	r2, #3
 8001c76:	4650      	mov	r0, sl
 8001c78:	7821      	ldrb	r1, [r4, #0]
 8001c7a:	f000 fa1d 	bl	80020b8 <memchr>
 8001c7e:	b138      	cbz	r0, 8001c90 <_svfiprintf_r+0x150>
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	9b04      	ldr	r3, [sp, #16]
 8001c84:	eba0 000a 	sub.w	r0, r0, sl
 8001c88:	4082      	lsls	r2, r0
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	3401      	adds	r4, #1
 8001c8e:	9304      	str	r3, [sp, #16]
 8001c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c94:	2206      	movs	r2, #6
 8001c96:	4826      	ldr	r0, [pc, #152]	; (8001d30 <_svfiprintf_r+0x1f0>)
 8001c98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c9c:	f000 fa0c 	bl	80020b8 <memchr>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d038      	beq.n	8001d16 <_svfiprintf_r+0x1d6>
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <_svfiprintf_r+0x1f4>)
 8001ca6:	bb1b      	cbnz	r3, 8001cf0 <_svfiprintf_r+0x1b0>
 8001ca8:	9b03      	ldr	r3, [sp, #12]
 8001caa:	3307      	adds	r3, #7
 8001cac:	f023 0307 	bic.w	r3, r3, #7
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	9303      	str	r3, [sp, #12]
 8001cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cb6:	4433      	add	r3, r6
 8001cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8001cba:	e768      	b.n	8001b8e <_svfiprintf_r+0x4e>
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cc4:	e7a6      	b.n	8001c14 <_svfiprintf_r+0xd4>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f04f 0c0a 	mov.w	ip, #10
 8001ccc:	4619      	mov	r1, r3
 8001cce:	3401      	adds	r4, #1
 8001cd0:	9305      	str	r3, [sp, #20]
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cd8:	3a30      	subs	r2, #48	; 0x30
 8001cda:	2a09      	cmp	r2, #9
 8001cdc:	d903      	bls.n	8001ce6 <_svfiprintf_r+0x1a6>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0c6      	beq.n	8001c70 <_svfiprintf_r+0x130>
 8001ce2:	9105      	str	r1, [sp, #20]
 8001ce4:	e7c4      	b.n	8001c70 <_svfiprintf_r+0x130>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	2301      	movs	r3, #1
 8001cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cee:	e7f0      	b.n	8001cd2 <_svfiprintf_r+0x192>
 8001cf0:	ab03      	add	r3, sp, #12
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	4638      	mov	r0, r7
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <_svfiprintf_r+0x1f8>)
 8001cfa:	a904      	add	r1, sp, #16
 8001cfc:	f3af 8000 	nop.w
 8001d00:	1c42      	adds	r2, r0, #1
 8001d02:	4606      	mov	r6, r0
 8001d04:	d1d6      	bne.n	8001cb4 <_svfiprintf_r+0x174>
 8001d06:	89ab      	ldrh	r3, [r5, #12]
 8001d08:	065b      	lsls	r3, r3, #25
 8001d0a:	f53f af2d 	bmi.w	8001b68 <_svfiprintf_r+0x28>
 8001d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d10:	b01d      	add	sp, #116	; 0x74
 8001d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d16:	ab03      	add	r3, sp, #12
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	462a      	mov	r2, r5
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <_svfiprintf_r+0x1f8>)
 8001d20:	a904      	add	r1, sp, #16
 8001d22:	f000 f87d 	bl	8001e20 <_printf_i>
 8001d26:	e7eb      	b.n	8001d00 <_svfiprintf_r+0x1c0>
 8001d28:	080021c2 	.word	0x080021c2
 8001d2c:	080021c8 	.word	0x080021c8
 8001d30:	080021cc 	.word	0x080021cc
 8001d34:	00000000 	.word	0x00000000
 8001d38:	08001a8d 	.word	0x08001a8d

08001d3c <_printf_common>:
 8001d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d40:	4616      	mov	r6, r2
 8001d42:	4699      	mov	r9, r3
 8001d44:	688a      	ldr	r2, [r1, #8]
 8001d46:	690b      	ldr	r3, [r1, #16]
 8001d48:	4607      	mov	r7, r0
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	bfb8      	it	lt
 8001d4e:	4613      	movlt	r3, r2
 8001d50:	6033      	str	r3, [r6, #0]
 8001d52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d56:	460c      	mov	r4, r1
 8001d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d5c:	b10a      	cbz	r2, 8001d62 <_printf_common+0x26>
 8001d5e:	3301      	adds	r3, #1
 8001d60:	6033      	str	r3, [r6, #0]
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	0699      	lsls	r1, r3, #26
 8001d66:	bf42      	ittt	mi
 8001d68:	6833      	ldrmi	r3, [r6, #0]
 8001d6a:	3302      	addmi	r3, #2
 8001d6c:	6033      	strmi	r3, [r6, #0]
 8001d6e:	6825      	ldr	r5, [r4, #0]
 8001d70:	f015 0506 	ands.w	r5, r5, #6
 8001d74:	d106      	bne.n	8001d84 <_printf_common+0x48>
 8001d76:	f104 0a19 	add.w	sl, r4, #25
 8001d7a:	68e3      	ldr	r3, [r4, #12]
 8001d7c:	6832      	ldr	r2, [r6, #0]
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	42ab      	cmp	r3, r5
 8001d82:	dc2b      	bgt.n	8001ddc <_printf_common+0xa0>
 8001d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d88:	1e13      	subs	r3, r2, #0
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	bf18      	it	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	0692      	lsls	r2, r2, #26
 8001d92:	d430      	bmi.n	8001df6 <_printf_common+0xba>
 8001d94:	4649      	mov	r1, r9
 8001d96:	4638      	mov	r0, r7
 8001d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d9c:	47c0      	blx	r8
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d023      	beq.n	8001dea <_printf_common+0xae>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	6922      	ldr	r2, [r4, #16]
 8001da6:	f003 0306 	and.w	r3, r3, #6
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf14      	ite	ne
 8001dae:	2500      	movne	r5, #0
 8001db0:	6833      	ldreq	r3, [r6, #0]
 8001db2:	f04f 0600 	mov.w	r6, #0
 8001db6:	bf08      	it	eq
 8001db8:	68e5      	ldreq	r5, [r4, #12]
 8001dba:	f104 041a 	add.w	r4, r4, #26
 8001dbe:	bf08      	it	eq
 8001dc0:	1aed      	subeq	r5, r5, r3
 8001dc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001dc6:	bf08      	it	eq
 8001dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	bfc4      	itt	gt
 8001dd0:	1a9b      	subgt	r3, r3, r2
 8001dd2:	18ed      	addgt	r5, r5, r3
 8001dd4:	42b5      	cmp	r5, r6
 8001dd6:	d11a      	bne.n	8001e0e <_printf_common+0xd2>
 8001dd8:	2000      	movs	r0, #0
 8001dda:	e008      	b.n	8001dee <_printf_common+0xb2>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4652      	mov	r2, sl
 8001de0:	4649      	mov	r1, r9
 8001de2:	4638      	mov	r0, r7
 8001de4:	47c0      	blx	r8
 8001de6:	3001      	adds	r0, #1
 8001de8:	d103      	bne.n	8001df2 <_printf_common+0xb6>
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295
 8001dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df2:	3501      	adds	r5, #1
 8001df4:	e7c1      	b.n	8001d7a <_printf_common+0x3e>
 8001df6:	2030      	movs	r0, #48	; 0x30
 8001df8:	18e1      	adds	r1, r4, r3
 8001dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e04:	4422      	add	r2, r4
 8001e06:	3302      	adds	r3, #2
 8001e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e0c:	e7c2      	b.n	8001d94 <_printf_common+0x58>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4622      	mov	r2, r4
 8001e12:	4649      	mov	r1, r9
 8001e14:	4638      	mov	r0, r7
 8001e16:	47c0      	blx	r8
 8001e18:	3001      	adds	r0, #1
 8001e1a:	d0e6      	beq.n	8001dea <_printf_common+0xae>
 8001e1c:	3601      	adds	r6, #1
 8001e1e:	e7d9      	b.n	8001dd4 <_printf_common+0x98>

08001e20 <_printf_i>:
 8001e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e24:	7e0f      	ldrb	r7, [r1, #24]
 8001e26:	4691      	mov	r9, r2
 8001e28:	2f78      	cmp	r7, #120	; 0x78
 8001e2a:	4680      	mov	r8, r0
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	469a      	mov	sl, r3
 8001e30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e36:	d807      	bhi.n	8001e48 <_printf_i+0x28>
 8001e38:	2f62      	cmp	r7, #98	; 0x62
 8001e3a:	d80a      	bhi.n	8001e52 <_printf_i+0x32>
 8001e3c:	2f00      	cmp	r7, #0
 8001e3e:	f000 80d5 	beq.w	8001fec <_printf_i+0x1cc>
 8001e42:	2f58      	cmp	r7, #88	; 0x58
 8001e44:	f000 80c1 	beq.w	8001fca <_printf_i+0x1aa>
 8001e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e50:	e03a      	b.n	8001ec8 <_printf_i+0xa8>
 8001e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e56:	2b15      	cmp	r3, #21
 8001e58:	d8f6      	bhi.n	8001e48 <_printf_i+0x28>
 8001e5a:	a101      	add	r1, pc, #4	; (adr r1, 8001e60 <_printf_i+0x40>)
 8001e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e60:	08001eb9 	.word	0x08001eb9
 8001e64:	08001ecd 	.word	0x08001ecd
 8001e68:	08001e49 	.word	0x08001e49
 8001e6c:	08001e49 	.word	0x08001e49
 8001e70:	08001e49 	.word	0x08001e49
 8001e74:	08001e49 	.word	0x08001e49
 8001e78:	08001ecd 	.word	0x08001ecd
 8001e7c:	08001e49 	.word	0x08001e49
 8001e80:	08001e49 	.word	0x08001e49
 8001e84:	08001e49 	.word	0x08001e49
 8001e88:	08001e49 	.word	0x08001e49
 8001e8c:	08001fd3 	.word	0x08001fd3
 8001e90:	08001ef9 	.word	0x08001ef9
 8001e94:	08001f8d 	.word	0x08001f8d
 8001e98:	08001e49 	.word	0x08001e49
 8001e9c:	08001e49 	.word	0x08001e49
 8001ea0:	08001ff5 	.word	0x08001ff5
 8001ea4:	08001e49 	.word	0x08001e49
 8001ea8:	08001ef9 	.word	0x08001ef9
 8001eac:	08001e49 	.word	0x08001e49
 8001eb0:	08001e49 	.word	0x08001e49
 8001eb4:	08001f95 	.word	0x08001f95
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	1d1a      	adds	r2, r3, #4
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	602a      	str	r2, [r5, #0]
 8001ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0a0      	b.n	800200e <_printf_i+0x1ee>
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	0607      	lsls	r7, r0, #24
 8001ed2:	f103 0104 	add.w	r1, r3, #4
 8001ed6:	6029      	str	r1, [r5, #0]
 8001ed8:	d501      	bpl.n	8001ede <_printf_i+0xbe>
 8001eda:	681e      	ldr	r6, [r3, #0]
 8001edc:	e003      	b.n	8001ee6 <_printf_i+0xc6>
 8001ede:	0646      	lsls	r6, r0, #25
 8001ee0:	d5fb      	bpl.n	8001eda <_printf_i+0xba>
 8001ee2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	da03      	bge.n	8001ef2 <_printf_i+0xd2>
 8001eea:	232d      	movs	r3, #45	; 0x2d
 8001eec:	4276      	negs	r6, r6
 8001eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	4859      	ldr	r0, [pc, #356]	; (800205c <_printf_i+0x23c>)
 8001ef6:	e012      	b.n	8001f1e <_printf_i+0xfe>
 8001ef8:	682b      	ldr	r3, [r5, #0]
 8001efa:	6820      	ldr	r0, [r4, #0]
 8001efc:	1d19      	adds	r1, r3, #4
 8001efe:	6029      	str	r1, [r5, #0]
 8001f00:	0605      	lsls	r5, r0, #24
 8001f02:	d501      	bpl.n	8001f08 <_printf_i+0xe8>
 8001f04:	681e      	ldr	r6, [r3, #0]
 8001f06:	e002      	b.n	8001f0e <_printf_i+0xee>
 8001f08:	0641      	lsls	r1, r0, #25
 8001f0a:	d5fb      	bpl.n	8001f04 <_printf_i+0xe4>
 8001f0c:	881e      	ldrh	r6, [r3, #0]
 8001f0e:	2f6f      	cmp	r7, #111	; 0x6f
 8001f10:	bf0c      	ite	eq
 8001f12:	2308      	moveq	r3, #8
 8001f14:	230a      	movne	r3, #10
 8001f16:	4851      	ldr	r0, [pc, #324]	; (800205c <_printf_i+0x23c>)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f1e:	6865      	ldr	r5, [r4, #4]
 8001f20:	2d00      	cmp	r5, #0
 8001f22:	bfa8      	it	ge
 8001f24:	6821      	ldrge	r1, [r4, #0]
 8001f26:	60a5      	str	r5, [r4, #8]
 8001f28:	bfa4      	itt	ge
 8001f2a:	f021 0104 	bicge.w	r1, r1, #4
 8001f2e:	6021      	strge	r1, [r4, #0]
 8001f30:	b90e      	cbnz	r6, 8001f36 <_printf_i+0x116>
 8001f32:	2d00      	cmp	r5, #0
 8001f34:	d04b      	beq.n	8001fce <_printf_i+0x1ae>
 8001f36:	4615      	mov	r5, r2
 8001f38:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f3c:	fb03 6711 	mls	r7, r3, r1, r6
 8001f40:	5dc7      	ldrb	r7, [r0, r7]
 8001f42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f46:	4637      	mov	r7, r6
 8001f48:	42bb      	cmp	r3, r7
 8001f4a:	460e      	mov	r6, r1
 8001f4c:	d9f4      	bls.n	8001f38 <_printf_i+0x118>
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d10b      	bne.n	8001f6a <_printf_i+0x14a>
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	07de      	lsls	r6, r3, #31
 8001f56:	d508      	bpl.n	8001f6a <_printf_i+0x14a>
 8001f58:	6923      	ldr	r3, [r4, #16]
 8001f5a:	6861      	ldr	r1, [r4, #4]
 8001f5c:	4299      	cmp	r1, r3
 8001f5e:	bfde      	ittt	le
 8001f60:	2330      	movle	r3, #48	; 0x30
 8001f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f6a:	1b52      	subs	r2, r2, r5
 8001f6c:	6122      	str	r2, [r4, #16]
 8001f6e:	464b      	mov	r3, r9
 8001f70:	4621      	mov	r1, r4
 8001f72:	4640      	mov	r0, r8
 8001f74:	f8cd a000 	str.w	sl, [sp]
 8001f78:	aa03      	add	r2, sp, #12
 8001f7a:	f7ff fedf 	bl	8001d3c <_printf_common>
 8001f7e:	3001      	adds	r0, #1
 8001f80:	d14a      	bne.n	8002018 <_printf_i+0x1f8>
 8001f82:	f04f 30ff 	mov.w	r0, #4294967295
 8001f86:	b004      	add	sp, #16
 8001f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	6023      	str	r3, [r4, #0]
 8001f94:	2778      	movs	r7, #120	; 0x78
 8001f96:	4832      	ldr	r0, [pc, #200]	; (8002060 <_printf_i+0x240>)
 8001f98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	6829      	ldr	r1, [r5, #0]
 8001fa0:	061f      	lsls	r7, r3, #24
 8001fa2:	f851 6b04 	ldr.w	r6, [r1], #4
 8001fa6:	d402      	bmi.n	8001fae <_printf_i+0x18e>
 8001fa8:	065f      	lsls	r7, r3, #25
 8001faa:	bf48      	it	mi
 8001fac:	b2b6      	uxthmi	r6, r6
 8001fae:	07df      	lsls	r7, r3, #31
 8001fb0:	bf48      	it	mi
 8001fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8001fb6:	6029      	str	r1, [r5, #0]
 8001fb8:	bf48      	it	mi
 8001fba:	6023      	strmi	r3, [r4, #0]
 8001fbc:	b91e      	cbnz	r6, 8001fc6 <_printf_i+0x1a6>
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	f023 0320 	bic.w	r3, r3, #32
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	e7a6      	b.n	8001f18 <_printf_i+0xf8>
 8001fca:	4824      	ldr	r0, [pc, #144]	; (800205c <_printf_i+0x23c>)
 8001fcc:	e7e4      	b.n	8001f98 <_printf_i+0x178>
 8001fce:	4615      	mov	r5, r2
 8001fd0:	e7bd      	b.n	8001f4e <_printf_i+0x12e>
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	6826      	ldr	r6, [r4, #0]
 8001fd6:	1d18      	adds	r0, r3, #4
 8001fd8:	6961      	ldr	r1, [r4, #20]
 8001fda:	6028      	str	r0, [r5, #0]
 8001fdc:	0635      	lsls	r5, r6, #24
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	d501      	bpl.n	8001fe6 <_printf_i+0x1c6>
 8001fe2:	6019      	str	r1, [r3, #0]
 8001fe4:	e002      	b.n	8001fec <_printf_i+0x1cc>
 8001fe6:	0670      	lsls	r0, r6, #25
 8001fe8:	d5fb      	bpl.n	8001fe2 <_printf_i+0x1c2>
 8001fea:	8019      	strh	r1, [r3, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	4615      	mov	r5, r2
 8001ff0:	6123      	str	r3, [r4, #16]
 8001ff2:	e7bc      	b.n	8001f6e <_printf_i+0x14e>
 8001ff4:	682b      	ldr	r3, [r5, #0]
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	1d1a      	adds	r2, r3, #4
 8001ffa:	602a      	str	r2, [r5, #0]
 8001ffc:	681d      	ldr	r5, [r3, #0]
 8001ffe:	6862      	ldr	r2, [r4, #4]
 8002000:	4628      	mov	r0, r5
 8002002:	f000 f859 	bl	80020b8 <memchr>
 8002006:	b108      	cbz	r0, 800200c <_printf_i+0x1ec>
 8002008:	1b40      	subs	r0, r0, r5
 800200a:	6060      	str	r0, [r4, #4]
 800200c:	6863      	ldr	r3, [r4, #4]
 800200e:	6123      	str	r3, [r4, #16]
 8002010:	2300      	movs	r3, #0
 8002012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002016:	e7aa      	b.n	8001f6e <_printf_i+0x14e>
 8002018:	462a      	mov	r2, r5
 800201a:	4649      	mov	r1, r9
 800201c:	4640      	mov	r0, r8
 800201e:	6923      	ldr	r3, [r4, #16]
 8002020:	47d0      	blx	sl
 8002022:	3001      	adds	r0, #1
 8002024:	d0ad      	beq.n	8001f82 <_printf_i+0x162>
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	079b      	lsls	r3, r3, #30
 800202a:	d413      	bmi.n	8002054 <_printf_i+0x234>
 800202c:	68e0      	ldr	r0, [r4, #12]
 800202e:	9b03      	ldr	r3, [sp, #12]
 8002030:	4298      	cmp	r0, r3
 8002032:	bfb8      	it	lt
 8002034:	4618      	movlt	r0, r3
 8002036:	e7a6      	b.n	8001f86 <_printf_i+0x166>
 8002038:	2301      	movs	r3, #1
 800203a:	4632      	mov	r2, r6
 800203c:	4649      	mov	r1, r9
 800203e:	4640      	mov	r0, r8
 8002040:	47d0      	blx	sl
 8002042:	3001      	adds	r0, #1
 8002044:	d09d      	beq.n	8001f82 <_printf_i+0x162>
 8002046:	3501      	adds	r5, #1
 8002048:	68e3      	ldr	r3, [r4, #12]
 800204a:	9903      	ldr	r1, [sp, #12]
 800204c:	1a5b      	subs	r3, r3, r1
 800204e:	42ab      	cmp	r3, r5
 8002050:	dcf2      	bgt.n	8002038 <_printf_i+0x218>
 8002052:	e7eb      	b.n	800202c <_printf_i+0x20c>
 8002054:	2500      	movs	r5, #0
 8002056:	f104 0619 	add.w	r6, r4, #25
 800205a:	e7f5      	b.n	8002048 <_printf_i+0x228>
 800205c:	080021d3 	.word	0x080021d3
 8002060:	080021e4 	.word	0x080021e4

08002064 <memmove>:
 8002064:	4288      	cmp	r0, r1
 8002066:	b510      	push	{r4, lr}
 8002068:	eb01 0402 	add.w	r4, r1, r2
 800206c:	d902      	bls.n	8002074 <memmove+0x10>
 800206e:	4284      	cmp	r4, r0
 8002070:	4623      	mov	r3, r4
 8002072:	d807      	bhi.n	8002084 <memmove+0x20>
 8002074:	1e43      	subs	r3, r0, #1
 8002076:	42a1      	cmp	r1, r4
 8002078:	d008      	beq.n	800208c <memmove+0x28>
 800207a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800207e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002082:	e7f8      	b.n	8002076 <memmove+0x12>
 8002084:	4601      	mov	r1, r0
 8002086:	4402      	add	r2, r0
 8002088:	428a      	cmp	r2, r1
 800208a:	d100      	bne.n	800208e <memmove+0x2a>
 800208c:	bd10      	pop	{r4, pc}
 800208e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002096:	e7f7      	b.n	8002088 <memmove+0x24>

08002098 <_sbrk_r>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	2300      	movs	r3, #0
 800209c:	4d05      	ldr	r5, [pc, #20]	; (80020b4 <_sbrk_r+0x1c>)
 800209e:	4604      	mov	r4, r0
 80020a0:	4608      	mov	r0, r1
 80020a2:	602b      	str	r3, [r5, #0]
 80020a4:	f7fe f9e8 	bl	8000478 <_sbrk>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d102      	bne.n	80020b2 <_sbrk_r+0x1a>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	b103      	cbz	r3, 80020b2 <_sbrk_r+0x1a>
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	20000204 	.word	0x20000204

080020b8 <memchr>:
 80020b8:	4603      	mov	r3, r0
 80020ba:	b510      	push	{r4, lr}
 80020bc:	b2c9      	uxtb	r1, r1
 80020be:	4402      	add	r2, r0
 80020c0:	4293      	cmp	r3, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	d101      	bne.n	80020ca <memchr+0x12>
 80020c6:	2000      	movs	r0, #0
 80020c8:	e003      	b.n	80020d2 <memchr+0x1a>
 80020ca:	7804      	ldrb	r4, [r0, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	428c      	cmp	r4, r1
 80020d0:	d1f6      	bne.n	80020c0 <memchr+0x8>
 80020d2:	bd10      	pop	{r4, pc}

080020d4 <memcpy>:
 80020d4:	440a      	add	r2, r1
 80020d6:	4291      	cmp	r1, r2
 80020d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80020dc:	d100      	bne.n	80020e0 <memcpy+0xc>
 80020de:	4770      	bx	lr
 80020e0:	b510      	push	{r4, lr}
 80020e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020e6:	4291      	cmp	r1, r2
 80020e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020ec:	d1f9      	bne.n	80020e2 <memcpy+0xe>
 80020ee:	bd10      	pop	{r4, pc}

080020f0 <_realloc_r>:
 80020f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f4:	4680      	mov	r8, r0
 80020f6:	4614      	mov	r4, r2
 80020f8:	460e      	mov	r6, r1
 80020fa:	b921      	cbnz	r1, 8002106 <_realloc_r+0x16>
 80020fc:	4611      	mov	r1, r2
 80020fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002102:	f7ff bc37 	b.w	8001974 <_malloc_r>
 8002106:	b92a      	cbnz	r2, 8002114 <_realloc_r+0x24>
 8002108:	f7ff fbcc 	bl	80018a4 <_free_r>
 800210c:	4625      	mov	r5, r4
 800210e:	4628      	mov	r0, r5
 8002110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002114:	f000 f81b 	bl	800214e <_malloc_usable_size_r>
 8002118:	4284      	cmp	r4, r0
 800211a:	4607      	mov	r7, r0
 800211c:	d802      	bhi.n	8002124 <_realloc_r+0x34>
 800211e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002122:	d812      	bhi.n	800214a <_realloc_r+0x5a>
 8002124:	4621      	mov	r1, r4
 8002126:	4640      	mov	r0, r8
 8002128:	f7ff fc24 	bl	8001974 <_malloc_r>
 800212c:	4605      	mov	r5, r0
 800212e:	2800      	cmp	r0, #0
 8002130:	d0ed      	beq.n	800210e <_realloc_r+0x1e>
 8002132:	42bc      	cmp	r4, r7
 8002134:	4622      	mov	r2, r4
 8002136:	4631      	mov	r1, r6
 8002138:	bf28      	it	cs
 800213a:	463a      	movcs	r2, r7
 800213c:	f7ff ffca 	bl	80020d4 <memcpy>
 8002140:	4631      	mov	r1, r6
 8002142:	4640      	mov	r0, r8
 8002144:	f7ff fbae 	bl	80018a4 <_free_r>
 8002148:	e7e1      	b.n	800210e <_realloc_r+0x1e>
 800214a:	4635      	mov	r5, r6
 800214c:	e7df      	b.n	800210e <_realloc_r+0x1e>

0800214e <_malloc_usable_size_r>:
 800214e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002152:	1f18      	subs	r0, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	bfbc      	itt	lt
 8002158:	580b      	ldrlt	r3, [r1, r0]
 800215a:	18c0      	addlt	r0, r0, r3
 800215c:	4770      	bx	lr
	...

08002160 <_init>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	bf00      	nop
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr

0800216c <_fini>:
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	bf00      	nop
 8002170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002172:	bc08      	pop	{r3}
 8002174:	469e      	mov	lr, r3
 8002176:	4770      	bx	lr
